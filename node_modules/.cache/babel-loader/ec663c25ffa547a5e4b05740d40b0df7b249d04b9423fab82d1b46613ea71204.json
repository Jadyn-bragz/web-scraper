{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jadyn\\\\web-scraper-1.0\\\\client\\\\src\\\\Quotes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Quotes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quotes() {\n  _s();\n  const [quotes, setQuotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch('http://localhost:5000/').then(res => res.json()).then(data => {\n      setQuotes(data);\n      setLoading(false);\n    }).catch(err => {\n      console.error('Error fetching quotes:', err);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quotes...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quotes-container\",\n    children: quotes.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quote-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"blockquote\", {\n        className: \"quote-text\",\n        children: [\"\\\"\", q.quote, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quote-author\",\n        children: [\"\\u2014 \", q.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quote-tags\",\n        children: q.tags.map((tag, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"quote-tag\",\n          children: tag\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(Quotes, \"U8SAC7bWRIVkiTsA2tCMr1ansuI=\");\n_c = Quotes;\nexport default Quotes;\nvar _c;\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Quotes","_s","quotes","setQuotes","loading","setLoading","fetch","then","res","json","data","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","q","index","quote","author","tags","tag","i","_c","$RefreshReg$"],"sources":["C:/Users/jadyn/web-scraper-1.0/client/src/Quotes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Quotes.css';\r\n\r\nfunction Quotes() {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setQuotes(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.error('Error fetching quotes:', err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading quotes...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"quotes-container\">\r\n      {quotes.map((q, index) => (\r\n        <div className=\"quote-card\" key={index}>\r\n          <blockquote className=\"quote-text\">\"{q.quote}\"</blockquote>\r\n          <p className=\"quote-author\">â€” {q.author}</p>\r\n          <div className=\"quote-tags\">\r\n            {q.tags.map((tag, i) => (\r\n              <span className=\"quote-tag\" key={i}>{tag}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quotes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,wBAAwB,CAAC,CAC5BC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdP,SAAS,CAACO,IAAI,CAAC;MACfL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDM,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC5CP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAgB,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrC;EAEA,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,kBAAkB;IAAAL,QAAA,EAC9Bb,MAAM,CAACmB,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACnBxB,OAAA;MAAKqB,SAAS,EAAC,YAAY;MAAAL,QAAA,gBACzBhB,OAAA;QAAYqB,SAAS,EAAC,YAAY;QAAAL,QAAA,GAAC,IAAC,EAACO,CAAC,CAACE,KAAK,EAAC,IAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC3DpB,OAAA;QAAGqB,SAAS,EAAC,cAAc;QAAAL,QAAA,GAAC,SAAE,EAACO,CAAC,CAACG,MAAM;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5CpB,OAAA;QAAKqB,SAAS,EAAC,YAAY;QAAAL,QAAA,EACxBO,CAAC,CAACI,IAAI,CAACL,GAAG,CAAC,CAACM,GAAG,EAAEC,CAAC,kBACjB7B,OAAA;UAAMqB,SAAS,EAAC,WAAW;UAAAL,QAAA,EAAUY;QAAG,GAAPC,CAAC;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAChD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,GAPyBI,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQjC,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAClB,EAAA,CApCQD,MAAM;AAAA6B,EAAA,GAAN7B,MAAM;AAsCf,eAAeA,MAAM;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}